# name: Reusable Workflow To Deploy MuleSoft Application

# on:
#   workflow_call:

# jobs:
#   build:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout this repo
#         uses: actions/checkout@v4

#       - name: Cache dependencies
#         uses: actions/cache@v4
#         with:
#           path: ~/.m2/repository
#           key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
#           restore-keys: ${{ runner.os }}-maven-

#       - name: Set up JDK 17
#         uses: actions/setup-java@v4
#         with:
#           distribution: "zulu"
#           java-version: 17

#       - name: Build JAR
#         run: mvn clean package -DmuleDeploy

#       - name: Publish to Exchange
#         run: |
#           mvn deploy --settings .settings/org.eclipse.core.resources.prefs -DskipMunitTests \
#             -Danypoint.username="${{ secrets.USER }}" \
#             -Danypoint.password="${{ secrets.PASS }}"

#   deploydev:
#     needs: build
#     runs-on: ubuntu-latest
#     environment: dev
#     steps:
#       - name: Checkout this repo
#         uses: actions/checkout@v4

#       - name: Cache dependencies
#         uses: actions/cache@v4
#         with:
#           path: ~/.m2/repository
#           key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
#           restore-keys: ${{ runner.os }}-maven-

#       - name: Save current deployed version (Dev)
#         run: |
#           ACCESS_TOKEN=$(curl -s -X POST https://anypoint.mulesoft.com/accounts/api/v2/oauth2/token \
#             -H 'Content-Type: application/json' \
#             -d '{"client_id":"${{ secrets.USER }}","client_secret":"${{ secrets.PASS }}","grant_type":"client_credentials"}' \
#             | jq -r '.access_token')

#           curl -s -X GET \
#             -H "Authorization: Bearer $ACCESS_TOKEN" \
#             -H "X-ANYPNT-ORG-ID: ${{ secrets.ANYPOINT_ORG_ID }}" \
#             -H "X-ANYPNT-ENV-ID: ${{ secrets.ENV_ID }}" \
#             "https://anypoint.mulesoft.com/cloudhub/api/v2/applications/${{ secrets.APP_NAME }}" \
#             | jq -r '.fileVersion' > previous_version.txt

#       - name: Deploy to Dev
#         run: |
#           mvn deploy --settings .settings/org.eclipse.core.resources.prefs -DskipMunitTests -DmuleDeploy \
#             -Danypoint.username="${{ secrets.USER }}" \
#             -Danypoint.password="${{ secrets.PASS }}" \
#             -Danypoint.businessGroup="${{ secrets.ANYPOINT_ORG_ID }}" \
#             -Denv="${{ secrets.ENV }}" \
#             -Dappname="${{ secrets.APP_NAME }}" \
#             -Danypoint.platform.client_id="${{ secrets.ENV_CLIENT_ID }}" \
#             -Danypoint.platform.client_secret="${{ secrets.ENV_CLIENT_SECRET }}"

#       - name: Health Check (Dev)
#         id: health_dev
#         continue-on-error: true
#         run: |
#           sleep 60
#           STATUS=$(curl -s -o /dev/null -w "%{http_code}" https://${{ secrets.APP_NAME }}.cloudhub.io/health)
#           echo "status=$STATUS" >> $GITHUB_OUTPUT

#       - name: Rollback if Health Check Fails (Dev)
#         if: steps.health_dev.outputs.status != '200'
#         run: |
#           PREVIOUS_VERSION=$(cat previous_version.txt)
#           echo "Rolling back to version $PREVIOUS_VERSION"
#           mvn deploy --settings .settings/org.eclipse.core.resources.prefs -DskipMunitTests -DmuleDeploy \
#             -Danypoint.username="${{ secrets.USER }}" \
#             -Danypoint.password="${{ secrets.PASS }}" \
#             -Danypoint.businessGroup="${{ secrets.ANYPOINT_ORG_ID }}" \
#             -Denv="${{ secrets.ENV }}" \
#             -Dappname="${{ secrets.APP_NAME }}" \
#             -Dapp.version=$PREVIOUS_VERSION \
#             -Danypoint.platform.client_id="${{ secrets.ENV_CLIENT_ID }}" \
#             -Danypoint.platform.client_secret="${{ secrets.ENV_CLIENT_SECRET }}"

#   deployuat:
#     needs: deploydev
#     runs-on: ubuntu-latest
#     environment: uat
#     steps:
#       - name: Checkout this repo
#         uses: actions/checkout@v4

#       - name: Cache dependencies
#         uses: actions/cache@v4
#         with:
#           path: ~/.m2/repository
#           key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
#           restore-keys: ${{ runner.os }}-maven-

#       - name: Save current deployed version (UAT)
#         run: |
#           ACCESS_TOKEN=$(curl -s -X POST https://anypoint.mulesoft.com/accounts/api/v2/oauth2/token \
#             -H 'Content-Type: application/json' \
#             -d '{"client_id":"${{ secrets.ENV_CLIENT_ID }}","client_secret":"${{ secrets.ENV_CLIENT_SECRET }}","grant_type":"client_credentials"}' \
#             | jq -r '.access_token')

#           curl -s -X GET \
#             -H "Authorization: Bearer $ACCESS_TOKEN" \
#             -H "X-ANYPNT-ORG-ID: ${{ secrets.ANYPOINT_ORG_ID }}" \
#             -H "X-ANYPNT-ENV-ID: ${{ secrets.ENV_ID }}" \
#             "https://anypoint.mulesoft.com/cloudhub/api/v2/applications/${{ secrets.APP_NAME }}" \
#             | jq -r '.fileVersion' > previous_version_uat.txt

#       - name: Deploy to UAT
#         run: |
#           mvn deploy --settings .settings/org.eclipse.core.resources.prefs -DskipMunitTests -DmuleDeploy \
#             -Danypoint.username="${{ secrets.USER }}" \
#             -Danypoint.password="${{ secrets.PASS }}" \
#             -Danypoint.businessGroup="${{ secrets.ANYPOINT_ORG_ID }}" \
#             -Denv="${{ secrets.ENV }}" \
#             -Dappname="${{ secrets.APP_NAME }}" \
#             -Danypoint.platform.client_id="${{ secrets.ENV_CLIENT_ID }}" \
#             -Danypoint.platform.client_secret="${{ secrets.ENV_CLIENT_SECRET }}"

#       - name: Health Check (UAT)
#         id: health_uat
#         continue-on-error: true
#         run: |
#           sleep 60
#           STATUS=$(curl -s -o /dev/null -w "%{http_code}" https://${{ secrets.APP_NAME }}.cloudhub.io/health)
#           echo "status=$STATUS" >> $GITHUB_OUTPUT

#       - name: Rollback if Health Check Fails (UAT)
#         if: steps.health_uat.outputs.status != '200'
#         run: |
#           PREVIOUS_VERSION=$(cat previous_version_uat.txt)
#           echo "Rolling back to version $PREVIOUS_VERSION"
#           mvn deploy --settings .settings/org.eclipse.core.resources.prefs -DskipMunitTests -DmuleDeploy \
#             -Danypoint.username="${{ secrets.USER }}" \
#             -Danypoint.password="${{ secrets.PASS }}" \
#             -Danypoint.businessGroup="${{ secrets.ANYPOINT_ORG_ID }}" \
#             -Denv="${{ secrets.ENV }}" \
#             -Dappname="${{ secrets.APP_NAME }}" \
#             -Dapp.version=$PREVIOUS_VERSION \
#             -Danypoint.platform.client_id="${{ secrets.ENV_CLIENT_ID }}" \
#             -Danypoint.platform.client_secret="${{ secrets.ENV_CLIENT_SECRET }}"

# # main code with rollback
name: Reusable Workflow To Deploy MuleSoft Application

on:
  workflow_call:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      jar_version: ${{ steps.set_version.outputs.jar_version }}
    steps:
      - name: Checkout this repo
        uses: actions/checkout@v4

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: "zulu"
          java-version: 17

      - name: Build JAR
        run: mvn clean package -DmuleDeploy

      - name: Get JAR version
        id: set_version
        run: |
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "jar_version=$VERSION" >> $GITHUB_OUTPUT

      - name: Archive JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: application-jar
          path: target/*.jar
          retention-days: 7

      - name: Publish to Exchange
        run: |
          mvn deploy --settings .settings/org.eclipse.core.resources.prefs -DskipMunitTests \
          -Danypoint.username="${{ secrets.USER }}" \
          -Danypoint.password="${{ secrets.PASS }}"

  deploydev:
    needs: build
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - name: Checkout this repo
        uses: actions/checkout@v4

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-

      - name: Download JAR from build
        uses: actions/download-artifact@v4
        with:
          name: application-jar
          path: target/

      - name: Deploy to Dev
        run: |
          mvn deploy --settings .settings/org.eclipse.core.resources.prefs -DskipMunitTests -DmuleDeploy \
          -Danypoint.username="${{ secrets.USER }}" \
          -Danypoint.password="${{ secrets.PASS }}" \
          -Danypoint.businessGroup="${{ secrets.ANYPOINT_ORG_ID }}" \
          -Denv="${{ secrets.ENV }}" \
          -Dappname="${{ secrets.APP_NAME }}" \
          -Danypoint.platform.client_id="${{ secrets.ENV_CLIENT_ID }}" \
          -Danypoint.platform.client_secret="${{ secrets.ENV_CLIENT_SECRET }}"

  deployuat:
    needs: deploydev
    runs-on: ubuntu-latest
    environment: uat
    steps:
      - name: Checkout this repo
        uses: actions/checkout@v4

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-

      - name: Download JAR from build
        uses: actions/download-artifact@v4
        with:
          name: application-jar
          path: target/

      - name: Deploy to UAT
        id: uat_deploy
        continue-on-error: true
        run: |
          mvn deploy --settings .settings/org.eclipse.core.resources.prefs -DskipMunitTests -DmuleDeploy \
            -Danypoint.username="${{ secrets.USER }}" \
            -Danypoint.password="${{ secrets.PASS }}" \
            -Danypoint.businessGroup="${{ secrets.ANYPOINT_ORG_ID }}" \
            -Denv="${{ secrets.ENV }}" \
            -Dappname="${{ secrets.APP_NAME }}" \
            -Danypoint.platform.client_id="${{ secrets.ENV_CLIENT_ID }}" \
            -Danypoint.platform.client_secret="${{ secrets.ENV_CLIENT_SECRET }}"

      - name: Save rollback JAR and push to rollback-artifacts branch
        if: steps.uat_deploy.outcome == 'success'
        run: |
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          mkdir -p rollback-jars/$VERSION
          cp target/*.jar rollback-jars/$VERSION/
          echo "$VERSION" > rollback-jars/$VERSION/version.txt

          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git fetch origin rollback-artifacts
          git checkout rollback-artifacts
          cp -r rollback-jars/$VERSION .
          git add rollback-jars/$VERSION
          git commit -m "Add rollback artifact for version $VERSION"
          git push origin rollback-artifacts



# name: Reusable Workflow To Deploy MuleSoft Application
 
# on:
#   push:
#     branches: [ main ]
#   workflow_call:

# jobs:
#   build:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout this repo
#         uses: actions/checkout@v4

#       - name: Cache dependencies
#         uses: actions/cache@v4
#         with:
#           path: ~/.m2/repository
#           key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
#           restore-keys: ${{ runner.os }}-maven-

#       - name: Set up JDK 17
#         uses: actions/setup-java@v4
#         with:
#           distribution: "zulu"
#           java-version: 17
#       - name: Build JAR
#         run: mvn clean package -DmuleDeploy
#       - name: Publish to Exchange
#         run: |
#           mvn deploy --settings .settings/org.eclipse.core.resources.prefs -DskipMunitTests \
#           -Danypoint.username="${{ secrets.USER }}" \
#           -Danypoint.password="${{ secrets.PASS }}" 



#   deploydev:
#     needs: build
#     runs-on: ubuntu-latest
#     environment: dev
#     steps:    
#     - name: Checkout this repo
#       uses: actions/checkout@v4
#     - name: Cache dependencies
#       uses: actions/cache@v4
#       with:
#         path: ~/.m2/repository
#         key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
#         restore-keys: |
#           ${{ runner.os }}-maven-       
#     - name: Deploy to dev
#       run: |
#         mvn deploy --settings .settings/org.eclipse.core.resources.prefs -DskipMunitTests -DmuleDeploy \
#         -Danypoint.username="${{ secrets.USER }}" \
#         -Danypoint.password="${{ secrets.PASS }}" \
#         -Danypoint.businessGroup="${{ secrets.ANYPOINT_ORG_ID }}" \
#         -Denv="${{ secrets.ENV }}" \
#         -Dappname="${{ secrets.APP_NAME }}" \
#         -Danypoint.platform.client_id="${{ secrets.ENV_CLIENT_ID }}" \
#         -Danypoint.platform.client_secret="${{ secrets.ENV_CLIENT_SECRET }}"
        
         
#   deployuat:
#     needs: deploydev
#     runs-on: ubuntu-latest
#     environment: uat
#     steps:    
#     - name: Checkout this repo
#       uses: actions/checkout@v4
#     - name: Cache dependencies
#       uses: actions/cache@v4
#       with:
#         path: ~/.m2/repository
#         key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
#         restore-keys: |
#           ${{ runner.os }}-maven-
#     - name: Deploy to uat
#       run: |
#         mvn deploy --settings .settings/org.eclipse.core.resources.prefs -DskipMunitTests -DmuleDeploy \
#         -Danypoint.username="${{ secrets.USER }}" \
#         -Danypoint.password="${{ secrets.PASS }}" \
#         -Danypoint.businessGroup="${{ secrets.ANYPOINT_ORG_ID }}" \
#         -Denv="${{ secrets.ENV }}" \
#         -Dappname="${{ secrets.APP_NAME }}" \
#         -Danypoint.platform.client_id="${{ secrets.ENV_CLIENT_ID }}" \
#         -Danypoint.platform.client_secret="${{ secrets.ENV_CLIENT_SECRET }}"
  
#   deployprod:
#     needs: deployuat
#     runs-on: ubuntu-latest
#     environment: prod
#     steps:    
#     - name: Checkout this repo
#       uses: actions/checkout@v4
#     - name: Cache dependencies
#       uses: actions/cache@v4
#       with:
#         path: ~/.m2/repository
#         key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
#         restore-keys: |
#           ${{ runner.os }}-maven-
#     - name: Deploy to prod
#       run: |
#         mvn deploy --settings .settings/org.eclipse.core.resources.prefs -DskipMunitTests -DmuleDeploy \
#         -Danypoint.username="${{ secrets.USER }}" \
#         -Danypoint.password="${{ secrets.PASS }}" \
#         -Danypoint.businessGroup="${{ secrets.ANYPOINT_ORG_ID }}" \
#         -Denv="${{ secrets.ENV }}" \
#         -Dappname="${{ secrets.APP_NAME }}" \
#         -Danypoint.platform.client_id="${{ secrets.ENV_CLIENT_ID }}" \
#         -Danypoint.platform.client_secret="${{ secrets.ENV_CLIENT_SECRET }}"





#------ main code ----- without rollback
# name: Reusable Workflow To Deploy MuleSoft Application
 

# on:
#   workflow_call:

# jobs:
#   build:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout this repo
#         uses: actions/checkout@v4

#       - name: Cache dependencies
#         uses: actions/cache@v4
#         with:
#           path: ~/.m2/repository
#           key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
#           restore-keys: ${{ runner.os }}-maven-

#       - name: Set up JDK 17
#         uses: actions/setup-java@v4
#         with:
#           distribution: "zulu"
#           java-version: 17
#       - name: Build JAR
#         run: mvn clean package -DmuleDeploy
#       - name: Publish to Exchange
#         run: |
#           mvn deploy --settings .settings/org.eclipse.core.resources.prefs -DskipMunitTests \
#           -Danypoint.username="${{ secrets.USER }}" \
#           -Danypoint.password="${{ secrets.PASS }}" 



#   deploydev:
#     needs: build
#     runs-on: ubuntu-latest
#     environment: dev
#     steps:    
#     - name: Checkout this repo
#       uses: actions/checkout@v4
#     - name: Cache dependencies
#       uses: actions/cache@v4
#       with:
#         path: ~/.m2/repository
#         key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
#         restore-keys: |
#           ${{ runner.os }}-maven-       
#     - name: Deploy to dev
#       run: |
#         mvn deploy --settings .settings/org.eclipse.core.resources.prefs -DskipMunitTests -DmuleDeploy \
#         -Danypoint.username="${{ secrets.USER }}" \
#         -Danypoint.password="${{ secrets.PASS }}" \
#         -Danypoint.businessGroup="${{ secrets.ANYPOINT_ORG_ID }}" \
#         -Denv="${{ secrets.ENV }}" \
#         -Dappname="${{ secrets.APP_NAME }}" \
#         -Danypoint.platform.client_id="${{ secrets.ENV_CLIENT_ID }}" \
#         -Danypoint.platform.client_secret="${{ secrets.ENV_CLIENT_SECRET }}"
        
         
#   deployuat:
#     needs: deploydev
#     runs-on: ubuntu-latest
#     environment: uat
#     steps:    
#     - name: Checkout this repo
#       uses: actions/checkout@v4
#     - name: Cache dependencies
#       uses: actions/cache@v4
#       with:
#         path: ~/.m2/repository
#         key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
#         restore-keys: |
#           ${{ runner.os }}-maven-
#     - name: Deploy to uat
#       run: |
#         mvn deploy --settings .settings/org.eclipse.core.resources.prefs -DskipMunitTests -DmuleDeploy \
#         -Danypoint.username="${{ secrets.USER }}" \
#         -Danypoint.password="${{ secrets.PASS }}" \
#         -Danypoint.businessGroup="${{ secrets.ANYPOINT_ORG_ID }}" \
#         -Denv="${{ secrets.ENV }}" \
#         -Dappname="${{ secrets.APP_NAME }}" \
#         -Danypoint.platform.client_id="${{ secrets.ENV_CLIENT_ID }}" \
#         -Danypoint.platform.client_secret="${{ secrets.ENV_CLIENT_SECRET }}"
  
#   deployprod:
#     needs: deployuat
#     runs-on: ubuntu-latest
#     environment: prod
#     steps:    
#     - name: Checkout this repo
#       uses: actions/checkout@v4
#     - name: Cache dependencies
#       uses: actions/cache@v4
#       with:
#         path: ~/.m2/repository
#         key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
#         restore-keys: |
#           ${{ runner.os }}-maven-
#     - name: Deploy to prod
#       run: |
#         mvn deploy --settings .settings/org.eclipse.core.resources.prefs -DskipMunitTests -DmuleDeploy \
#         -Danypoint.username="${{ secrets.USER }}" \
#         -Danypoint.password="${{ secrets.PASS }}" \
#         -Danypoint.businessGroup="${{ secrets.ANYPOINT_ORG_ID }}" \
#         -Denv="${{ secrets.ENV }}" \
#         -Dappname="${{ secrets.APP_NAME }}" \
#         -Danypoint.platform.client_id="${{ secrets.ENV_CLIENT_ID }}" \
#         -Danypoint.platform.client_secret="${{ secrets.ENV_CLIENT_SECRET }}"

# name: Deploy MuleSoft App

# on:
#   workflow_call:

# jobs:
#   build:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Cache Maven dependencies
#         uses: actions/cache@v4
#         with:
#           path: ~/.m2/repository
#           key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
#           restore-keys: ${{ runner.os }}-maven-

#       - name: Set up JDK 17
#         uses: actions/setup-java@v4
#         with:
#           distribution: "zulu"
#           java-version: 17

#       - name: Build Application
#         run: mvn clean package -DmuleDeploy

#       - name: Publish to Exchange
#         run: |
#           mvn deploy --settings .settings/org.eclipse.core.resources.prefs -DskipMunitTests \
#             -Danypoint.username="${{ secrets.USER }}" \
#             -Danypoint.password="${{ secrets.PASS }}"

#   deploy-dev:
#     needs: build
#     runs-on: ubuntu-latest
#     environment: dev
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Deploy to DEV
#         run: |
#           mvn deploy --settings .settings/org.eclipse.core.resources.prefs -DskipMunitTests -DmuleDeploy \
#             -Danypoint.username="${{ secrets.USER }}" \
#             -Danypoint.password="${{ secrets.PASS }}" \
#             -Danypoint.businessGroup="${{ secrets.DEV_BUSINESS_GROUP }}" \
#             -Denv=${{ secrets.ENV }} \
#             -Dappname="${{ secrets.DEV_APP_NAME }}" \
#             -Danypoint.platform.client_id="${{ secrets.DEV_CLIENT_ID }}" \
#             -Danypoint.platform.client_secret="${{ secrets.DEV_CLIENT_SECRET }}"

#   deploy-uat:
#     needs: deploy-dev
#     runs-on: ubuntu-latest
#     environment: uat
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Deploy to UAT
#         run: |
#           mvn deploy --settings .settings/org.eclipse.core.resources.prefs -DskipMunitTests -DmuleDeploy \
#             -Danypoint.username="${{ secrets.USER }}" \
#             -Danypoint.password="${{ secrets.PASS }}" \
#             -Danypoint.businessGroup="${{ secrets.UAT_BUSINESS_GROUP }}" \
#             -Denv=${{ secrets.ENV }} \
#             -Dappname="${{ secrets.UAT_APP_NAME }}" \
#             -Danypoint.platform.client_id="${{ secrets.UAT_CLIENT_ID }}" \
#             -Danypoint.platform.client_secret="${{ secrets.UAT_CLIENT_SECRET }}"

#   deploy-prod:
#     needs: deploy-uat
#     runs-on: ubuntu-latest
#     environment: prod
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Deploy to PROD
#         run: |
#           mvn deploy --settings .settings/org.eclipse.core.resources.prefs -DskipMunitTests -DmuleDeploy \
#             -Danypoint.username="${{ secrets.USER }}" \
#             -Danypoint.password="${{ secrets.PASS }}" \
#             -Danypoint.businessGroup="${{ secrets.PROD_BUSINESS_GROUP }}" \
#             -Denv=${{ secrets.ENV }} \
#             -Dappname="${{ secrets.PROD_APP_NAME }}" \
#             -Danypoint.platform.client_id="${{ secrets.PROD_CLIENT_ID }}" \
#             -Danypoint.platform.client_secret="${{ secrets.PROD_CLIENT_SECRET }}"


# # latest
# name: Reusable Workflow To Deploy MuleSoft Application

# on:
#   workflow_call:
#     inputs:
#       rollback_version:
#         description: 'Version to rollback to (leave empty for normal deployment)'
#         required: false
#         type: string
#       target_environment:
#         description: 'Target environment for rollback'
#         required: false
#         type: string
#         default: 'uat'

# env:
#   MAVEN_OPTS: -Dmaven.repo.local=~/.m2/repository

# jobs:
#   build:
#     runs-on: ubuntu-latest
#     if: ${{ !inputs.rollback_version }}
#     outputs:
#       jar_version: ${{ steps.set_version.outputs.jar_version }}
#       jar_filename: ${{ steps.set_version.outputs.jar_filename }}
#     steps:
#       - name: Checkout this repo
#         uses: actions/checkout@v4

#       - name: Cache dependencies
#         uses: actions/cache@v4
#         with:
#           path: ~/.m2/repository
#           key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
#           restore-keys: ${{ runner.os }}-maven-

#       - name: Set up JDK 17
#         uses: actions/setup-java@v4
#         with:
#           distribution: "zulu"
#           java-version: 17

#       - name: Build JAR
#         run: mvn clean package -DmuleDeploy

#       - name: Get JAR version and filename
#         id: set_version
#         run: |
#           VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
#           ARTIFACT_ID=$(mvn help:evaluate -Dexpression=project.artifactId -q -DforceStdout)
#           JAR_FILENAME="${ARTIFACT_ID}-${VERSION}.jar"
#           echo "jar_version=$VERSION" >> $GITHUB_OUTPUT
#           echo "jar_filename=$JAR_FILENAME" >> $GITHUB_OUTPUT
#           echo "Built JAR: $JAR_FILENAME (version: $VERSION)"

#       - name: Verify JAR exists
#         run: |
#           if [ ! -f "target/${{ steps.set_version.outputs.jar_filename }}" ]; then
#             echo "Expected JAR file not found: target/${{ steps.set_version.outputs.jar_filename }}"
#             ls -la target/
#             exit 1
#           fi

#       - name: Archive JAR artifact
#         uses: actions/upload-artifact@v4
#         with:
#           name: application-jar-${{ steps.set_version.outputs.jar_version }}
#           path: target/${{ steps.set_version.outputs.jar_filename }}
#           retention-days: 7

#       - name: Publish to Exchange
#         run: |
#           mvn deploy --settings .settings/org.eclipse.core.resources.prefs -DskipMunitTests \
#           -Danypoint.username="${{ secrets.USER }}" \
#           -Danypoint.password="${{ secrets.PASS }}"

#   deploydev:
#     needs: build
#     runs-on: ubuntu-latest
#     if: ${{ !inputs.rollback_version }}
#     environment: dev
#     steps:
#       - name: Checkout this repo
#         uses: actions/checkout@v4

#       - name: Cache dependencies
#         uses: actions/cache@v4
#         with:
#           path: ~/.m2/repository
#           key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
#           restore-keys: ${{ runner.os }}-maven-

#       - name: Download JAR artifact
#         uses: actions/download-artifact@v4
#         with:
#           name: application-jar-${{ needs.build.outputs.jar_version }}
#           path: target/

#       - name: Deploy to Dev
#         run: |
#           mvn deploy --settings .settings/org.eclipse.core.resources.prefs -DskipMunitTests -DmuleDeploy \
#           -Danypoint.username="${{ secrets.USER }}" \
#           -Danypoint.password="${{ secrets.PASS }}" \
#           -Danypoint.businessGroup="${{ secrets.ANYPOINT_ORG_ID }}" \
#           -Denv="${{ secrets.ENV }}" \
#           -Dappname="${{ secrets.APP_NAME }}" \
#           -Danypoint.platform.client_id="${{ secrets.ENV_CLIENT_ID }}" \
#           -Danypoint.platform.client_secret="${{ secrets.ENV_CLIENT_SECRET }}"

#       - name: Record Dev deployment
#         id: record_dev
#         run: |
#           # Create deployment record
#           echo "{
#             \"timestamp\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\",
#             \"version\": \"${{ needs.build.outputs.jar_version }}\",
#             \"commit\": \"${{ github.sha }}\",
#             \"environment\": \"dev\",
#             \"actor\": \"${{ github.actor }}\",
#             \"run_id\": \"${{ github.run_id }}\",
#             \"status\": \"success\"
#           }" > deployment-record-dev.json
          
#           echo "DEPLOYMENT_RECORD<<EOF" >> $GITHUB_ENV
#           cat deployment-record-dev.json >> $GITHUB_ENV
#           echo "EOF" >> $GITHUB_ENV

#       - name: Upload Dev deployment record
#         uses: actions/upload-artifact@v4
#         with:
#           name: deployment-record-dev-${{ github.run_id }}
#           path: deployment-record-dev.json

#   deployuat:
#     needs: [build, deploydev]
#     runs-on: ubuntu-latest
#     if: ${{ always() && (needs.deploydev.result == 'success' || inputs.rollback_version) }}
#     environment: uat
#     outputs:
#       deployment_status: ${{ steps.uat_deploy.outcome }}
#       deployed_version: ${{ steps.get_version.outputs.current_version }}
#     steps:
#       - name: Checkout this repo
#         uses: actions/checkout@v4
#         with:
#           fetch-depth: 0
#           token: ${{ secrets.GITHUB_TOKEN }}

#       - name: Setup Git
#         run: |
#           git config --local user.email "action@github.com"
#           git config --local user.name "GitHub Action"

#       - name: Cache dependencies
#         uses: actions/cache@v4
#         with:
#           path: ~/.m2/repository
#           key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
#           restore-keys: ${{ runner.os }}-maven-

#       # Get deployment history
#       - name: Get deployment history
#         run: |
#           # Try to checkout deployment history branch
#           git checkout deployment-history 2>/dev/null || {
#             git checkout -b deployment-history
#             echo "[]" > deployment-history.json
#             git add deployment-history.json
#             git commit -m "Initialize deployment history"
#             git push origin deployment-history
#           }
          
#           # Ensure deployment history file exists
#           if [ ! -f deployment-history.json ]; then
#             echo "[]" > deployment-history.json
#           fi

#       # Determine version to deploy (new or rollback)
#       - name: Determine deployment version
#         id: get_version
#         run: |
#           if [ -n "${{ inputs.rollback_version }}" ]; then
#             # Rollback scenario
#             DEPLOY_VERSION="${{ inputs.rollback_version }}"
#             DEPLOYMENT_TYPE="rollback"
#             echo "Performing rollback to version: $DEPLOY_VERSION"
            
#             # Verify rollback version exists in history
#             if ! jq -e ".[] | select(.version == \"$DEPLOY_VERSION\" and .environment == \"uat\" and .status == \"success\")" deployment-history.json > /dev/null; then
#               echo "Error: Version $DEPLOY_VERSION not found in successful UAT deployments"
#               exit 1
#             fi
#           else
#             # Normal deployment
#             DEPLOY_VERSION="${{ needs.build.outputs.jar_version }}"
#             DEPLOYMENT_TYPE="deployment"
#             echo "Performing normal deployment of version: $DEPLOY_VERSION"
#           fi
          
#           echo "current_version=$DEPLOY_VERSION" >> $GITHUB_OUTPUT
#           echo "deployment_type=$DEPLOYMENT_TYPE" >> $GITHUB_OUTPUT

#       # Get previous successful version for potential rollback
#       - name: Get previous UAT version
#         id: get_prev_version
#         run: |
#           # Get the last successful UAT deployment (excluding current version if it exists)
#           PREV_VERSION=$(jq -r '.[] | select(.environment == "uat" and .status == "success" and .version != "${{ steps.get_version.outputs.current_version }}") | .version' deployment-history.json | tail -1)
          
#           if [ "$PREV_VERSION" == "null" ] || [ -z "$PREV_VERSION" ]; then
#             PREV_VERSION="none"
#           fi
          
#           echo "previous_version=$PREV_VERSION" >> $GITHUB_OUTPUT
#           echo "Previous successful UAT version: $PREV_VERSION"

#       # Download appropriate JAR
#       - name: Download JAR artifact
#         run: |
#           if [ "${{ steps.get_version.outputs.deployment_type }}" == "rollback" ]; then
#             # For rollback, try to download the specific version artifact
#             echo "Downloading artifact for rollback version: ${{ steps.get_version.outputs.current_version }}"
#             gh auth login --with-token <<< "${{ secrets.GITHUB_TOKEN }}"
            
#             # Try to find and download the artifact
#             ARTIFACT_FOUND=false
#             for run_id in $(gh run list --limit 50 --json databaseId --jq '.[].databaseId'); do
#               if gh run download $run_id --name "uat-deployed-${{ steps.get_version.outputs.current_version }}" --dir target/ 2>/dev/null; then
#                 ARTIFACT_FOUND=true
#                 echo "Found and downloaded rollback artifact from run $run_id"
#                 break
#               fi
#             done
            
#             if [ "$ARTIFACT_FOUND" = false ]; then
#               echo "Error: Could not find artifact for rollback version ${{ steps.get_version.outputs.current_version }}"
#               exit 1
#             fi
#           else
#             # Normal deployment - download from build job
#             echo "Downloading current build artifact"
#             gh auth login --with-token <<< "${{ secrets.GITHUB_TOKEN }}"
#             gh run download ${{ github.run_id }} --name "application-jar-${{ steps.get_version.outputs.current_version }}" --dir target/
#           fi

#       # Deploy to UAT
#       - name: Deploy to UAT
#         id: uat_deploy
#         run: |
#           echo "Deploying version ${{ steps.get_version.outputs.current_version }} to UAT..."
#           echo "Deployment type: ${{ steps.get_version.outputs.deployment_type }}"
          
#           # ---- Uncomment this line below to simulate deployment failure and test rollback ----
#           # exit 1
          
#           mvn deploy --settings .settings/org.eclipse.core.resources.prefs -DskipMunitTests -DmuleDeploy \
#             -Danypoint.username="${{ secrets.USER }}" \
#             -Danypoint.password="${{ secrets.PASS }}" \
#             -Danypoint.businessGroup="${{ secrets.ANYPOINT_ORG_ID }}" \
#             -Denv="${{ secrets.ENV }}" \
#             -Dappname="${{ secrets.APP_NAME }}" \
#             $([ "${{ steps.get_version.outputs.deployment_type }}" == "rollback" ] && echo "-Dversion=${{ steps.get_version.outputs.current_version }}") \
#             -Danypoint.platform.client_id="${{ secrets.ENV_CLIENT_ID }}" \
#             -Danypoint.platform.client_secret="${{ secrets.ENV_CLIENT_SECRET }}"

#       # Handle deployment failure with automatic rollback
#       - name: Handle deployment failure
#         if: failure() && steps.get_prev_version.outputs.previous_version != 'none' && steps.get_version.outputs.deployment_type != 'rollback'
#         run: |
#           echo "Deployment failed. Attempting automatic rollback to version: ${{ steps.get_prev_version.outputs.previous_version }}"
          
#           # Download the previous successful version artifact
#           gh auth login --with-token <<< "${{ secrets.GITHUB_TOKEN }}"
          
#           ARTIFACT_FOUND=false
#           for run_id in $(gh run list --limit 50 --json databaseId --jq '.[].databaseId'); do
#             if gh run download $run_id --name "uat-deployed-${{ steps.get_prev_version.outputs.previous_version }}" --dir target/ 2>/dev/null; then
#               ARTIFACT_FOUND=true
#               echo "Found and downloaded rollback artifact from run $run_id"
#               break
#             fi
#           done
          
#           if [ "$ARTIFACT_FOUND" = true ]; then
#             # Deploy the previous version
#             mvn deploy --settings .settings/org.eclipse.core.resources.prefs -DskipMunitTests -DmuleDeploy \
#               -Danypoint.username="${{ secrets.USER }}" \
#               -Danypoint.password="${{ secrets.PASS }}" \
#               -Danypoint.businessGroup="${{ secrets.ANYPOINT_ORG_ID }}" \
#               -Denv="${{ secrets.ENV }}" \
#               -Dappname="${{ secrets.APP_NAME }}" \
#               -Dversion="${{ steps.get_prev_version.outputs.previous_version }}" \
#               -Danypoint.platform.client_id="${{ secrets.ENV_CLIENT_ID }}" \
#               -Danypoint.platform.client_secret="${{ secrets.ENV_CLIENT_SECRET }}"
            
#             echo "Automatic rollback completed to version: ${{ steps.get_prev_version.outputs.previous_version }}"
#           else
#             echo "Could not find artifact for rollback version ${{ steps.get_prev_version.outputs.previous_version }}"
#             exit 1
#           fi

#       # Save successful deployment artifact
#       - name: Save UAT deployment artifact
#         if: success() && steps.get_version.outputs.deployment_type != 'rollback'
#         uses: actions/upload-artifact@v4
#         with:
#           name: uat-deployed-${{ steps.get_version.outputs.current_version }}
#           path: target/
#           retention-days: 90

#       # Record deployment in history
#       - name: Record deployment
#         if: always()
#         run: |
#           # Determine deployment status
#           if [ "${{ steps.uat_deploy.outcome }}" == "success" ]; then
#             STATUS="success"
#           else
#             STATUS="failed"
#           fi
          
#           # Create deployment record
#           echo "{
#             \"timestamp\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\",
#             \"version\": \"${{ steps.get_version.outputs.current_version }}\",
#             \"commit\": \"${{ github.sha }}\",
#             \"environment\": \"uat\",
#             \"actor\": \"${{ github.actor }}\",
#             \"run_id\": \"${{ github.run_id }}\",
#             \"status\": \"$STATUS\",
#             \"deployment_type\": \"${{ steps.get_version.outputs.deployment_type }}\"
#           }" > deployment-record-uat.json
          
#           echo "DEPLOYMENT_RECORD<<EOF" >> $GITHUB_ENV
#           cat deployment-record-uat.json >> $GITHUB_ENV
#           echo "EOF" >> $GITHUB_ENV

#       - name: Upload UAT deployment record
#         if: always()
#         uses: actions/upload-artifact@v4
#         with:
#           name: deployment-record-uat-${{ github.run_id }}
#           path: deployment-record-uat.json

#       - name: Update deployment history
#         if: always()
#         run: |
#           # Switch back to deployment history branch
#           git checkout deployment-history
          
#           # Add new deployment record to history
#           jq ". += [$(cat deployment-record-uat.json)]" deployment-history.json > temp.json
#           mv temp.json deployment-history.json
          
#           # Keep only last 100 records to prevent file from growing too large
#           jq 'sort_by(.timestamp) | .[-100:]' deployment-history.json > temp.json
#           mv temp.json deployment-history.json
          
#           # Commit the updated history
#           git add deployment-history.json
#           git commit -m "Record UAT deployment: ${{ steps.get_version.outputs.current_version }} (${{ steps.get_version.outputs.deployment_type }})"
#           git push origin deployment-history

#       # Clean up old artifacts
#       - name: Cleanup old artifacts
#         if: success()
#         run: |
#           gh auth login --with-token <<< "${{ secrets.GITHUB_TOKEN }}"
          
#           # Keep only the last 10 UAT deployment artifacts
#           gh api repos/${{ github.repository }}/actions/artifacts \
#             --jq '.artifacts[] | select(.name | startswith("uat-deployed-")) | .id' \
#             | sort -rn | tail -n +11 | while read artifact_id; do
#               echo "Deleting old artifact: $artifact_id"
#               gh api --method DELETE repos/${{ github.repository }}/actions/artifacts/$artifact_id || true
#             done

#   notify:
#     needs: [build, deploydev, deployuat]
#     runs-on: ubuntu-latest
#     if: always()
#     steps:
#       - name: Notify deployment status
#         run: |
#           if [ -n "${{ inputs.rollback_version }}" ]; then
#             # Rollback notification
#             if [ "${{ needs.deployuat.result }}" == "success" ]; then
#               echo "Rollback successful: Reverted to version ${{ inputs.rollback_version }} in UAT"
#             else
#               echo "Rollback failed: Could not revert to version ${{ inputs.rollback_version }} in UAT"
#             fi
#           else
#             # Normal deployment notification
#             if [ "${{ needs.deployuat.result }}" == "success" ]; then
#               echo "Deployment successful: Version ${{ needs.build.outputs.jar_version }} deployed to UAT"
#             elif [ "${{ needs.deployuat.result }}" == "failure" ]; then
#               echo "Deployment failed: Automatic rollback attempted for UAT"
#             else
#               echo "⚠Deployment status: ${{ needs.deployuat.result }}"
#             fi
#           fi

#       # Create deployment summary
#       - name: Create deployment summary
#         if: always()
#         run: |
#           echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
#           echo "" >> $GITHUB_STEP_SUMMARY
          
#           if [ -n "${{ inputs.rollback_version }}" ]; then
#             echo "**Type**: Rollback" >> $GITHUB_STEP_SUMMARY
#             echo "**Target Version**: ${{ inputs.rollback_version }}" >> $GITHUB_STEP_SUMMARY
#           else
#             echo "**Type**: Normal Deployment" >> $GITHUB_STEP_SUMMARY
#             echo "**Version**: ${{ needs.build.outputs.jar_version }}" >> $GITHUB_STEP_SUMMARY
#           fi
          
#           echo "**Environment**: UAT" >> $GITHUB_STEP_SUMMARY
#           echo "**Status**: ${{ needs.deployuat.result }}" >> $GITHUB_STEP_SUMMARY
#           echo "**Triggered by**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
#           echo "**Run ID**: ${{ github.run_id }}" >> $GITHUB_STEP_SUMMARY
          
#           if [ "${{ needs.deployuat.result }}" == "success" ]; then
#             echo "" >> $GITHUB_STEP_SUMMARY
#             echo "**Deployment completed successfully**" >> $GITHUB_STEP_SUMMARY
#           else
#             echo "" >> $GITHUB_STEP_SUMMARY
#             echo "**Deployment failed**" >> $GITHUB_STEP_SUMMARY
#           fi


