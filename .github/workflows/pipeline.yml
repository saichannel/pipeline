# name: Reusable Workflow To Deploy MuleSoft Application

# on:
#   workflow_call:

# jobs:
#   build:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout this repo
#         uses: actions/checkout@v4

#       - name: Cache dependencies
#         uses: actions/cache@v4
#         with:
#           path: ~/.m2/repository
#           key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
#           restore-keys: ${{ runner.os }}-maven-

#       - name: Set up JDK 17
#         uses: actions/setup-java@v4
#         with:
#           distribution: "zulu"
#           java-version: 17

#       - name: Build JAR
#         run: mvn clean package -DmuleDeploy

#       - name: Publish to Exchange
#         run: |
#           mvn deploy --settings .settings/org.eclipse.core.resources.prefs -DskipMunitTests \
#             -Danypoint.username="${{ secrets.USER }}" \
#             -Danypoint.password="${{ secrets.PASS }}"

#   deploydev:
#     needs: build
#     runs-on: ubuntu-latest
#     environment: dev
#     steps:
#       - name: Checkout this repo
#         uses: actions/checkout@v4

#       - name: Cache dependencies
#         uses: actions/cache@v4
#         with:
#           path: ~/.m2/repository
#           key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
#           restore-keys: ${{ runner.os }}-maven-

#       - name: Save current deployed version (Dev)
#         run: |
#           ACCESS_TOKEN=$(curl -s -X POST https://anypoint.mulesoft.com/accounts/api/v2/oauth2/token \
#             -H 'Content-Type: application/json' \
#             -d '{"client_id":"${{ secrets.USER }}","client_secret":"${{ secrets.PASS }}","grant_type":"client_credentials"}' \
#             | jq -r '.access_token')

#           curl -s -X GET \
#             -H "Authorization: Bearer $ACCESS_TOKEN" \
#             -H "X-ANYPNT-ORG-ID: ${{ secrets.ANYPOINT_ORG_ID }}" \
#             -H "X-ANYPNT-ENV-ID: ${{ secrets.ENV_ID }}" \
#             "https://anypoint.mulesoft.com/cloudhub/api/v2/applications/${{ secrets.APP_NAME }}" \
#             | jq -r '.fileVersion' > previous_version.txt

#       - name: Deploy to Dev
#         run: |
#           mvn deploy --settings .settings/org.eclipse.core.resources.prefs -DskipMunitTests -DmuleDeploy \
#             -Danypoint.username="${{ secrets.USER }}" \
#             -Danypoint.password="${{ secrets.PASS }}" \
#             -Danypoint.businessGroup="${{ secrets.ANYPOINT_ORG_ID }}" \
#             -Denv="${{ secrets.ENV }}" \
#             -Dappname="${{ secrets.APP_NAME }}" \
#             -Danypoint.platform.client_id="${{ secrets.ENV_CLIENT_ID }}" \
#             -Danypoint.platform.client_secret="${{ secrets.ENV_CLIENT_SECRET }}"

#       - name: Health Check (Dev)
#         id: health_dev
#         continue-on-error: true
#         run: |
#           sleep 60
#           STATUS=$(curl -s -o /dev/null -w "%{http_code}" https://${{ secrets.APP_NAME }}.cloudhub.io/health)
#           echo "status=$STATUS" >> $GITHUB_OUTPUT

#       - name: Rollback if Health Check Fails (Dev)
#         if: steps.health_dev.outputs.status != '200'
#         run: |
#           PREVIOUS_VERSION=$(cat previous_version.txt)
#           echo "Rolling back to version $PREVIOUS_VERSION"
#           mvn deploy --settings .settings/org.eclipse.core.resources.prefs -DskipMunitTests -DmuleDeploy \
#             -Danypoint.username="${{ secrets.USER }}" \
#             -Danypoint.password="${{ secrets.PASS }}" \
#             -Danypoint.businessGroup="${{ secrets.ANYPOINT_ORG_ID }}" \
#             -Denv="${{ secrets.ENV }}" \
#             -Dappname="${{ secrets.APP_NAME }}" \
#             -Dapp.version=$PREVIOUS_VERSION \
#             -Danypoint.platform.client_id="${{ secrets.ENV_CLIENT_ID }}" \
#             -Danypoint.platform.client_secret="${{ secrets.ENV_CLIENT_SECRET }}"

#   deployuat:
#     needs: deploydev
#     runs-on: ubuntu-latest
#     environment: uat
#     steps:
#       - name: Checkout this repo
#         uses: actions/checkout@v4

#       - name: Cache dependencies
#         uses: actions/cache@v4
#         with:
#           path: ~/.m2/repository
#           key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
#           restore-keys: ${{ runner.os }}-maven-

#       - name: Save current deployed version (UAT)
#         run: |
#           ACCESS_TOKEN=$(curl -s -X POST https://anypoint.mulesoft.com/accounts/api/v2/oauth2/token \
#             -H 'Content-Type: application/json' \
#             -d '{"client_id":"${{ secrets.ENV_CLIENT_ID }}","client_secret":"${{ secrets.ENV_CLIENT_SECRET }}","grant_type":"client_credentials"}' \
#             | jq -r '.access_token')

#           curl -s -X GET \
#             -H "Authorization: Bearer $ACCESS_TOKEN" \
#             -H "X-ANYPNT-ORG-ID: ${{ secrets.ANYPOINT_ORG_ID }}" \
#             -H "X-ANYPNT-ENV-ID: ${{ secrets.ENV_ID }}" \
#             "https://anypoint.mulesoft.com/cloudhub/api/v2/applications/${{ secrets.APP_NAME }}" \
#             | jq -r '.fileVersion' > previous_version_uat.txt

#       - name: Deploy to UAT
#         run: |
#           mvn deploy --settings .settings/org.eclipse.core.resources.prefs -DskipMunitTests -DmuleDeploy \
#             -Danypoint.username="${{ secrets.USER }}" \
#             -Danypoint.password="${{ secrets.PASS }}" \
#             -Danypoint.businessGroup="${{ secrets.ANYPOINT_ORG_ID }}" \
#             -Denv="${{ secrets.ENV }}" \
#             -Dappname="${{ secrets.APP_NAME }}" \
#             -Danypoint.platform.client_id="${{ secrets.ENV_CLIENT_ID }}" \
#             -Danypoint.platform.client_secret="${{ secrets.ENV_CLIENT_SECRET }}"

#       - name: Health Check (UAT)
#         id: health_uat
#         continue-on-error: true
#         run: |
#           sleep 60
#           STATUS=$(curl -s -o /dev/null -w "%{http_code}" https://${{ secrets.APP_NAME }}.cloudhub.io/health)
#           echo "status=$STATUS" >> $GITHUB_OUTPUT

#       - name: Rollback if Health Check Fails (UAT)
#         if: steps.health_uat.outputs.status != '200'
#         run: |
#           PREVIOUS_VERSION=$(cat previous_version_uat.txt)
#           echo "Rolling back to version $PREVIOUS_VERSION"
#           mvn deploy --settings .settings/org.eclipse.core.resources.prefs -DskipMunitTests -DmuleDeploy \
#             -Danypoint.username="${{ secrets.USER }}" \
#             -Danypoint.password="${{ secrets.PASS }}" \
#             -Danypoint.businessGroup="${{ secrets.ANYPOINT_ORG_ID }}" \
#             -Denv="${{ secrets.ENV }}" \
#             -Dappname="${{ secrets.APP_NAME }}" \
#             -Dapp.version=$PREVIOUS_VERSION \
#             -Danypoint.platform.client_id="${{ secrets.ENV_CLIENT_ID }}" \
#             -Danypoint.platform.client_secret="${{ secrets.ENV_CLIENT_SECRET }}"

# # main code with rollback
name: Reusable Workflow To Deploy MuleSoft Application

on:
  workflow_call:

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      jar_version: ${{ steps.set_version.outputs.jar_version }}
    steps:
      - name: Checkout this repo
        uses: actions/checkout@v4

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: "zulu"
          java-version: 17

      - name: Build JAR
        run: mvn clean package -DmuleDeploy

      - name: Get JAR version
        id: set_version
        run: |
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "jar_version=$VERSION" >> $GITHUB_OUTPUT

      - name: Archive JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: application-jar
          path: target/*.jar
          retention-days: 7

      - name: Publish to Exchange
        run: |
          mvn deploy --settings .settings/org.eclipse.core.resources.prefs -DskipMunitTests \
          -Danypoint.username="${{ secrets.USER }}" \
          -Danypoint.password="${{ secrets.PASS }}"

  deploydev:
    needs: build
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - name: Checkout this repo
        uses: actions/checkout@v4

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-

      - name: Deploy to Dev
        run: |
          mvn deploy --settings .settings/org.eclipse.core.resources.prefs -DskipMunitTests -DmuleDeploy \
          -Danypoint.username="${{ secrets.USER }}" \
          -Danypoint.password="${{ secrets.PASS }}" \
          -Danypoint.businessGroup="${{ secrets.ANYPOINT_ORG_ID }}" \
          -Denv="${{ secrets.ENV }}" \
          -Dappname="${{ secrets.APP_NAME }}" \
          -Danypoint.platform.client_id="${{ secrets.ENV_CLIENT_ID }}" \
          -Danypoint.platform.client_secret="${{ secrets.ENV_CLIENT_SECRET }}"

  deployuat:
    needs: deploydev
    runs-on: ubuntu-latest
    environment: uat
    steps:
      - name: Checkout this repo
        uses: actions/checkout@v4

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-

      # Download previous UAT JAR artifact
      - name: Download previous UAT artifact
        uses: actions/download-artifact@v4
        with:
          name: rollback-jar
          path: target/
        continue-on-error: true

      # Save previous version name
      - name: Save previous version
        if: success() || failure()
        run: |
          if [ -f target/*.jar ]; then
            # Extract version from JAR filename
            OLD_VERSION=$(ls target/*.jar | grep -oP '(?<=-)[0-9]+\.[0-9]+\.[0-9]+(?=\.jar)')
            echo "PREV_VERSION=$OLD_VERSION" >> $GITHUB_ENV
          else
            echo "PREV_VERSION=0.0.0" >> $GITHUB_ENV
          fi

      # Deploy new version to UAT
      - name: Try Deploy to UAT
        id: uat_deploy
        continue-on-error: true
        run: |
          # ---- Uncomment this line below to simulate deployment failure and test rollback ----
          # exit 1

          # Download current JAR from build job
          gh run download $GITHUB_RUN_ID -n application-jar -D target/
          
          mvn deploy --settings .settings/org.eclipse.core.resources.prefs -DskipMunitTests -DmuleDeploy \
            -Danypoint.username="${{ secrets.USER }}" \
            -Danypoint.password="${{ secrets.PASS }}" \
            -Danypoint.businessGroup="${{ secrets.ANYPOINT_ORG_ID }}" \
            -Denv="${{ secrets.ENV }}" \
            -Dappname="${{ secrets.APP_NAME }}" \
            -Danypoint.platform.client_id="${{ secrets.ENV_CLIENT_ID }}" \
            -Danypoint.platform.client_secret="${{ secrets.ENV_CLIENT_SECRET }}"


      # Rollback to previous version if needed
      - name: Rollback to Previous UAT Version
        if: steps.uat_deploy.outcome == 'failure'
        run: |
          echo "UAT deployment failed. Rolling back to version: ${{ env.PREV_VERSION }}"
          
          # Ensure we have the rollback JAR
          if [ ! -f target/*.jar ]; then
            echo "Downloading rollback artifact..."
            gh run download $GITHUB_RUN_ID -n rollback-jar -D target/ || true
          fi
          
          mvn deploy --settings .settings/org.eclipse.core.resources.prefs -DskipMunitTests -DmuleDeploy \
            -Danypoint.username="${{ secrets.USER }}" \
            -Danypoint.password="${{ secrets.PASS }}" \
            -Danypoint.businessGroup="${{ secrets.ANYPOINT_ORG_ID }}" \
            -Denv="${{ secrets.ENV }}" \
            -Dappname="${{ secrets.APP_NAME }}" \
            -Dversion="${{ env.PREV_VERSION }}" \
            -Danypoint.platform.client_id="${{ secrets.ENV_CLIENT_ID }}" \
            -Danypoint.platform.client_secret="${{ secrets.ENV_CLIENT_SECRET }}"

      # Save successful deployment artifact for future rollback
      - name: Save UAT artifact for rollback
        if: steps.uat_deploy.outcome == 'success'
        run: |
          # Get current JAR version
          CURRENT_VERSION=${{ needs.build.outputs.jar_version }}
          echo "Saving version $CURRENT_VERSION for rollback"
          
          # Prepare rollback artifact
          mkdir -p rollback-artifact
          cp target/*.jar rollback-artifact/
          
      - name: Upload rollback artifact
        if: steps.uat_deploy.outcome == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: rollback-jar
          path: rollback-artifact/*.jar
          retention-days: 7

# name: Reusable Workflow To Deploy MuleSoft Application
 
# on:
#   push:
#     branches: [ main ]
#   workflow_call:

# jobs:
#   build:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout this repo
#         uses: actions/checkout@v4

#       - name: Cache dependencies
#         uses: actions/cache@v4
#         with:
#           path: ~/.m2/repository
#           key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
#           restore-keys: ${{ runner.os }}-maven-

#       - name: Set up JDK 17
#         uses: actions/setup-java@v4
#         with:
#           distribution: "zulu"
#           java-version: 17
#       - name: Build JAR
#         run: mvn clean package -DmuleDeploy
#       - name: Publish to Exchange
#         run: |
#           mvn deploy --settings .settings/org.eclipse.core.resources.prefs -DskipMunitTests \
#           -Danypoint.username="${{ secrets.USER }}" \
#           -Danypoint.password="${{ secrets.PASS }}" 



#   deploydev:
#     needs: build
#     runs-on: ubuntu-latest
#     environment: dev
#     steps:    
#     - name: Checkout this repo
#       uses: actions/checkout@v4
#     - name: Cache dependencies
#       uses: actions/cache@v4
#       with:
#         path: ~/.m2/repository
#         key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
#         restore-keys: |
#           ${{ runner.os }}-maven-       
#     - name: Deploy to dev
#       run: |
#         mvn deploy --settings .settings/org.eclipse.core.resources.prefs -DskipMunitTests -DmuleDeploy \
#         -Danypoint.username="${{ secrets.USER }}" \
#         -Danypoint.password="${{ secrets.PASS }}" \
#         -Danypoint.businessGroup="${{ secrets.ANYPOINT_ORG_ID }}" \
#         -Denv="${{ secrets.ENV }}" \
#         -Dappname="${{ secrets.APP_NAME }}" \
#         -Danypoint.platform.client_id="${{ secrets.ENV_CLIENT_ID }}" \
#         -Danypoint.platform.client_secret="${{ secrets.ENV_CLIENT_SECRET }}"
        
         
#   deployuat:
#     needs: deploydev
#     runs-on: ubuntu-latest
#     environment: uat
#     steps:    
#     - name: Checkout this repo
#       uses: actions/checkout@v4
#     - name: Cache dependencies
#       uses: actions/cache@v4
#       with:
#         path: ~/.m2/repository
#         key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
#         restore-keys: |
#           ${{ runner.os }}-maven-
#     - name: Deploy to uat
#       run: |
#         mvn deploy --settings .settings/org.eclipse.core.resources.prefs -DskipMunitTests -DmuleDeploy \
#         -Danypoint.username="${{ secrets.USER }}" \
#         -Danypoint.password="${{ secrets.PASS }}" \
#         -Danypoint.businessGroup="${{ secrets.ANYPOINT_ORG_ID }}" \
#         -Denv="${{ secrets.ENV }}" \
#         -Dappname="${{ secrets.APP_NAME }}" \
#         -Danypoint.platform.client_id="${{ secrets.ENV_CLIENT_ID }}" \
#         -Danypoint.platform.client_secret="${{ secrets.ENV_CLIENT_SECRET }}"
  
#   deployprod:
#     needs: deployuat
#     runs-on: ubuntu-latest
#     environment: prod
#     steps:    
#     - name: Checkout this repo
#       uses: actions/checkout@v4
#     - name: Cache dependencies
#       uses: actions/cache@v4
#       with:
#         path: ~/.m2/repository
#         key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
#         restore-keys: |
#           ${{ runner.os }}-maven-
#     - name: Deploy to prod
#       run: |
#         mvn deploy --settings .settings/org.eclipse.core.resources.prefs -DskipMunitTests -DmuleDeploy \
#         -Danypoint.username="${{ secrets.USER }}" \
#         -Danypoint.password="${{ secrets.PASS }}" \
#         -Danypoint.businessGroup="${{ secrets.ANYPOINT_ORG_ID }}" \
#         -Denv="${{ secrets.ENV }}" \
#         -Dappname="${{ secrets.APP_NAME }}" \
#         -Danypoint.platform.client_id="${{ secrets.ENV_CLIENT_ID }}" \
#         -Danypoint.platform.client_secret="${{ secrets.ENV_CLIENT_SECRET }}"





#------ main code ----- without rollback
# name: Reusable Workflow To Deploy MuleSoft Application
 

# on:
#   workflow_call:

# jobs:
#   build:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout this repo
#         uses: actions/checkout@v4

#       - name: Cache dependencies
#         uses: actions/cache@v4
#         with:
#           path: ~/.m2/repository
#           key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
#           restore-keys: ${{ runner.os }}-maven-

#       - name: Set up JDK 17
#         uses: actions/setup-java@v4
#         with:
#           distribution: "zulu"
#           java-version: 17
#       - name: Build JAR
#         run: mvn clean package -DmuleDeploy
#       - name: Publish to Exchange
#         run: |
#           mvn deploy --settings .settings/org.eclipse.core.resources.prefs -DskipMunitTests \
#           -Danypoint.username="${{ secrets.USER }}" \
#           -Danypoint.password="${{ secrets.PASS }}" 



#   deploydev:
#     needs: build
#     runs-on: ubuntu-latest
#     environment: dev
#     steps:    
#     - name: Checkout this repo
#       uses: actions/checkout@v4
#     - name: Cache dependencies
#       uses: actions/cache@v4
#       with:
#         path: ~/.m2/repository
#         key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
#         restore-keys: |
#           ${{ runner.os }}-maven-       
#     - name: Deploy to dev
#       run: |
#         mvn deploy --settings .settings/org.eclipse.core.resources.prefs -DskipMunitTests -DmuleDeploy \
#         -Danypoint.username="${{ secrets.USER }}" \
#         -Danypoint.password="${{ secrets.PASS }}" \
#         -Danypoint.businessGroup="${{ secrets.ANYPOINT_ORG_ID }}" \
#         -Denv="${{ secrets.ENV }}" \
#         -Dappname="${{ secrets.APP_NAME }}" \
#         -Danypoint.platform.client_id="${{ secrets.ENV_CLIENT_ID }}" \
#         -Danypoint.platform.client_secret="${{ secrets.ENV_CLIENT_SECRET }}"
        
         
#   deployuat:
#     needs: deploydev
#     runs-on: ubuntu-latest
#     environment: uat
#     steps:    
#     - name: Checkout this repo
#       uses: actions/checkout@v4
#     - name: Cache dependencies
#       uses: actions/cache@v4
#       with:
#         path: ~/.m2/repository
#         key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
#         restore-keys: |
#           ${{ runner.os }}-maven-
#     - name: Deploy to uat
#       run: |
#         mvn deploy --settings .settings/org.eclipse.core.resources.prefs -DskipMunitTests -DmuleDeploy \
#         -Danypoint.username="${{ secrets.USER }}" \
#         -Danypoint.password="${{ secrets.PASS }}" \
#         -Danypoint.businessGroup="${{ secrets.ANYPOINT_ORG_ID }}" \
#         -Denv="${{ secrets.ENV }}" \
#         -Dappname="${{ secrets.APP_NAME }}" \
#         -Danypoint.platform.client_id="${{ secrets.ENV_CLIENT_ID }}" \
#         -Danypoint.platform.client_secret="${{ secrets.ENV_CLIENT_SECRET }}"
  
#   deployprod:
#     needs: deployuat
#     runs-on: ubuntu-latest
#     environment: prod
#     steps:    
#     - name: Checkout this repo
#       uses: actions/checkout@v4
#     - name: Cache dependencies
#       uses: actions/cache@v4
#       with:
#         path: ~/.m2/repository
#         key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
#         restore-keys: |
#           ${{ runner.os }}-maven-
#     - name: Deploy to prod
#       run: |
#         mvn deploy --settings .settings/org.eclipse.core.resources.prefs -DskipMunitTests -DmuleDeploy \
#         -Danypoint.username="${{ secrets.USER }}" \
#         -Danypoint.password="${{ secrets.PASS }}" \
#         -Danypoint.businessGroup="${{ secrets.ANYPOINT_ORG_ID }}" \
#         -Denv="${{ secrets.ENV }}" \
#         -Dappname="${{ secrets.APP_NAME }}" \
#         -Danypoint.platform.client_id="${{ secrets.ENV_CLIENT_ID }}" \
#         -Danypoint.platform.client_secret="${{ secrets.ENV_CLIENT_SECRET }}"

# name: Deploy MuleSoft App

# on:
#   workflow_call:

# jobs:
#   build:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Cache Maven dependencies
#         uses: actions/cache@v4
#         with:
#           path: ~/.m2/repository
#           key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
#           restore-keys: ${{ runner.os }}-maven-

#       - name: Set up JDK 17
#         uses: actions/setup-java@v4
#         with:
#           distribution: "zulu"
#           java-version: 17

#       - name: Build Application
#         run: mvn clean package -DmuleDeploy

#       - name: Publish to Exchange
#         run: |
#           mvn deploy --settings .settings/org.eclipse.core.resources.prefs -DskipMunitTests \
#             -Danypoint.username="${{ secrets.USER }}" \
#             -Danypoint.password="${{ secrets.PASS }}"

#   deploy-dev:
#     needs: build
#     runs-on: ubuntu-latest
#     environment: dev
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Deploy to DEV
#         run: |
#           mvn deploy --settings .settings/org.eclipse.core.resources.prefs -DskipMunitTests -DmuleDeploy \
#             -Danypoint.username="${{ secrets.USER }}" \
#             -Danypoint.password="${{ secrets.PASS }}" \
#             -Danypoint.businessGroup="${{ secrets.DEV_BUSINESS_GROUP }}" \
#             -Denv=${{ secrets.ENV }} \
#             -Dappname="${{ secrets.DEV_APP_NAME }}" \
#             -Danypoint.platform.client_id="${{ secrets.DEV_CLIENT_ID }}" \
#             -Danypoint.platform.client_secret="${{ secrets.DEV_CLIENT_SECRET }}"

#   deploy-uat:
#     needs: deploy-dev
#     runs-on: ubuntu-latest
#     environment: uat
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Deploy to UAT
#         run: |
#           mvn deploy --settings .settings/org.eclipse.core.resources.prefs -DskipMunitTests -DmuleDeploy \
#             -Danypoint.username="${{ secrets.USER }}" \
#             -Danypoint.password="${{ secrets.PASS }}" \
#             -Danypoint.businessGroup="${{ secrets.UAT_BUSINESS_GROUP }}" \
#             -Denv=${{ secrets.ENV }} \
#             -Dappname="${{ secrets.UAT_APP_NAME }}" \
#             -Danypoint.platform.client_id="${{ secrets.UAT_CLIENT_ID }}" \
#             -Danypoint.platform.client_secret="${{ secrets.UAT_CLIENT_SECRET }}"

#   deploy-prod:
#     needs: deploy-uat
#     runs-on: ubuntu-latest
#     environment: prod
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Deploy to PROD
#         run: |
#           mvn deploy --settings .settings/org.eclipse.core.resources.prefs -DskipMunitTests -DmuleDeploy \
#             -Danypoint.username="${{ secrets.USER }}" \
#             -Danypoint.password="${{ secrets.PASS }}" \
#             -Danypoint.businessGroup="${{ secrets.PROD_BUSINESS_GROUP }}" \
#             -Denv=${{ secrets.ENV }} \
#             -Dappname="${{ secrets.PROD_APP_NAME }}" \
#             -Danypoint.platform.client_id="${{ secrets.PROD_CLIENT_ID }}" \
#             -Danypoint.platform.client_secret="${{ secrets.PROD_CLIENT_SECRET }}"

         
